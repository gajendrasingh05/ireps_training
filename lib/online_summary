import 'package:flutter/material.dart';

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Online Bill Status',
      debugShowCheckedModeBanner: false,
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.blue,
          primary: Colors.blue.shade800,
        ),
        useMaterial3: true,
        inputDecorationTheme: InputDecorationTheme(
          filled: true,
          fillColor: Colors.grey.shade50,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: BorderSide(color: Colors.grey.shade300),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: BorderSide(color: Colors.grey.shade300),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(8),
            borderSide: BorderSide(color: Colors.blue.shade800, width: 1.5),
          ),
          contentPadding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
          isDense: true,
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.blue.shade800,
            foregroundColor: Colors.white,
            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        ),
        outlinedButtonTheme: OutlinedButtonThemeData(
          style: OutlinedButton.styleFrom(
            foregroundColor: Colors.blue.shade800,
            padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
            side: BorderSide(color: Colors.blue.shade800),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(8),
            ),
          ),
        ),
      ),
      home: const BillStatusPage(),
    );
  }
}

class BillStatusPage extends StatefulWidget {
  const BillStatusPage({super.key});

  @override
  State<BillStatusPage> createState() => _BillStatusPageState();
}

class _BillStatusPageState extends State<BillStatusPage> {
  final TextEditingController _searchController = TextEditingController();
  String _startDate = '28-04-2024';
  String _endDate = '30-04-2025';
  String _consigneeRailway = 'IREPS-TESTING';
  String _payingAuthorityRailway = 'IREPS-TESTING';
  String _consigneeDetails = '36640-SR. SECTION ENGINEER-I/PS/';

  // Added the missing variables that were referenced in _buildDropdownField
  String _railway = 'All';
  String _unitType = 'All';
  String _unitName = 'All';
  String _departmentName = 'All';
  String _userDepot = 'All';
  String _payingAuthority = 'All';

  // Reduced dropdown height by 15% (from 48 * 1.14 to 48 * 0.969)
  final double _dropdownHeight = 48 * 0.969;

  @override
  void dispose() {
    _searchController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        backgroundColor: Colors.blue.shade800,
        elevation: 0,
        title: const Text(
          'On-Line Bill Status',
          style: TextStyle(
            color: Colors.white,
            fontWeight: FontWeight.bold,
          ),
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back, color: Colors.white),
          onPressed: () {},
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.home, color: Colors.white),
            onPressed: () {},
          ),
        ],
      ),
      body: Container(
        decoration: BoxDecoration(
          gradient: LinearGradient(
            begin: Alignment.topCenter,
            end: Alignment.bottomCenter,
            colors: [Colors.blue.shade50, Colors.white],
          ),
        ),
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(16),
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Date Range Section
              Card(
                elevation: 1.5,
                shape: RoundedRectangleBorder(
                  borderRadius: BorderRadius.circular(12),
                ),
                child: Padding(
                  padding: const EdgeInsets.all(6),
                  child: Row(
                    children: [
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'From',
                              style: TextStyle(
                                fontWeight: FontWeight.w500,
                                fontSize: 14,
                              ),
                            ),
                            const SizedBox(height: 6),
                            InkWell(
                              onTap: () {
                                _selectDate(context, true);
                              },
                              child: Container(
                                padding: const EdgeInsets.symmetric(horizontal: 9, vertical: 8),
                                decoration: BoxDecoration(
                                  border: Border.all(color: Colors.grey.shade300),
                                  borderRadius: BorderRadius.circular(8),
                                  color: Colors.white,
                                ),
                                child: Row(
                                  children: [
                                    Expanded(
                                      child: Text(
                                        _startDate,
                                        style: const TextStyle(fontSize: 13),
                                      ),
                                    ),
                                    Icon(Icons.calendar_today, size: 14, color: Colors.blue.shade800),
                                  ],
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                      const SizedBox(width: 16),
                      Expanded(
                        child: Column(
                          crossAxisAlignment: CrossAxisAlignment.start,
                          children: [
                            const Text(
                              'To',
                              style: TextStyle(
                                fontWeight: FontWeight.w500,
                                fontSize: 14,
                              ),
                            ),
                            const SizedBox(height: 6),
                            InkWell(
                              onTap: () {
                                _selectDate(context, false);
                              },
                              child: Container(
                                padding: const EdgeInsets.symmetric(horizontal: 9, vertical: 8),
                                decoration: BoxDecoration(
                                  border: Border.all(color: Colors.grey.shade300),
                                  borderRadius: BorderRadius.circular(8),
                                  color: Colors.white,
                                ),
                                child: Row(
                                  children: [
                                    Expanded(
                                      child: Text(
                                        _endDate,
                                        style: const TextStyle(fontSize: 13),
                                      ),
                                    ),
                                    Icon(Icons.calendar_today, size: 14, color: Colors.blue.shade800),
                                  ],
                                ),
                              ),
                            ),
                          ],
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              const SizedBox(height: 16),

              // Railway
              _buildDropdownField(
                  'Railway',
                  _railway,
                      (value) {
                    setState(() {
                      _railway = value!;
                    });
                  },
                  ['All', 'Northern Railway', 'Southern Railway', 'Eastern Railway', 'Western Railway']
              ),

              // Unit Type
              _buildDropdownField(
                  'Unit Type',
                  _unitType,
                      (value) {
                    setState(() {
                      _unitType = value!;
                    });
                  },
                  ['All', 'Division', 'Workshop', 'Headquarters']
              ),

              // Unit Name
              _buildDropdownField(
                  'Unit Name',
                  _unitName,
                      (value) {
                    setState(() {
                      _unitName = value!;
                    });
                  },
                  ['All', 'Delhi Division', 'Chennai Division', 'Mumbai Division']
              ),

              // Department Name
              _buildDropdownField(
                  'Department Name',
                  _departmentName,
                      (value) {
                    setState(() {
                      _departmentName = value!;
                    });
                  },
                  ['All', 'Mechanical', 'Electrical', 'Civil', 'Signal & Telecom']
              ),

              // User Depot
              _buildDropdownField(
                  'User Depot',
                  _userDepot,
                      (value) {
                    setState(() {
                      _userDepot = value!;
                    });
                  },
                  ['All', 'Delhi Depot', 'Chennai Depot', 'Mumbai Depot']
              ),

              // Paying Authority
              _buildDropdownField(
                  'Paying Authority',
                  _payingAuthority,
                      (value) {
                    setState(() {
                      _payingAuthority = value!;
                    });
                  },
                  ['All', 'FA&CAO/Northern Railway', 'FA&CAO/Southern Railway', 'FA&CAO/Eastern Railway']
              ),

              const SizedBox(height: 20),

              // Action Buttons
              Row(
                children: [
                  Expanded(
                    child: ElevatedButton(
                      style: ElevatedButton.styleFrom(
                        elevation: 0,
                      ),
                      onPressed: () {
                        _getBillDetails();
                      },
                      child: const Text(
                        'Get Details',
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ),
                  const SizedBox(width: 12),
                  Expanded(
                    child: OutlinedButton(
                      style: OutlinedButton.styleFrom(
                        backgroundColor: Colors.white,
                      ),
                      onPressed: () {
                        _resetForm();
                      },
                      child: const Text(
                        'Reset',
                        style: TextStyle(
                          fontSize: 14,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ),
                ],
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Added date picker functionality
  Future<void> _selectDate(BuildContext context, bool isStartDate) async {
    final DateTime currentDate = DateTime.now();
    final DateTime initialDate = isStartDate
        ? _parseDate(_startDate)
        : _parseDate(_endDate);

    final DateTime? pickedDate = await showDatePicker(
      context: context,
      initialDate: initialDate,
      firstDate: DateTime(2020),
      lastDate: DateTime(2030),
      builder: (context, child) {
        return Theme(
          data: Theme.of(context).copyWith(
            colorScheme: ColorScheme.light(
              primary: Colors.blue.shade800,
              onPrimary: Colors.white,
              onSurface: Colors.black,
            ),
          ),
          child: child!,
        );
      },
    );

    if (pickedDate != null) {
      setState(() {
        final String formattedDate = '${pickedDate.day.toString().padLeft(2, '0')}-'
            '${pickedDate.month.toString().padLeft(2, '0')}-'
            '${pickedDate.year}';

        if (isStartDate) {
          _startDate = formattedDate;
        } else {
          _endDate = formattedDate;
        }
      });
    }
  }

  // Helper method to parse date string to DateTime
  DateTime _parseDate(String dateStr) {
    List<String> parts = dateStr.split('-');
    return DateTime(
      int.parse(parts[2]), // year
      int.parse(parts[1]), // month
      int.parse(parts[0]), // day
    );
  }

  // Add functionality for Get Details button
  void _getBillDetails() {
    // This would typically make an API call or perform some action
    // For now, let's just show a snackbar
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text('Fetching bill details for date range: $_startDate to $_endDate'),
        backgroundColor: Colors.blue.shade800,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  // Add functionality for Reset button
  void _resetForm() {
    setState(() {
      _startDate = '28-04-2024';
      _endDate = '30-04-2025';
      _railway = 'All';
      _unitType = 'All';
      _unitName = 'All';
      _departmentName = 'All';
      _userDepot = 'All';
      _payingAuthority = 'All';
    });

    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Text('Form has been reset'),
        backgroundColor: Colors.blue.shade800,
        behavior: SnackBarBehavior.floating,
        shape: RoundedRectangleBorder(
          borderRadius: BorderRadius.circular(8),
        ),
      ),
    );
  }

  Widget _buildDropdownField(
      String label,
      String value,
      Function(String?) onChanged,
      List<String> items
      ) {
    return Padding(
      padding: const EdgeInsets.only(bottom: 6), // Reduced padding by 15%
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          Padding(
            padding: const EdgeInsets.only(left: 4, bottom: 5), // Reduced bottom padding by 15%
            child: Text(
              label,
              style: TextStyle(
                fontSize: 13, // Reduced font size by 15%
                fontWeight: FontWeight.w500,
                color: Colors.grey.shade800,
              ),
            ),
          ),
          Container(
            height: _dropdownHeight, // Using the reduced height variable (15% reduction)
            decoration: BoxDecoration(
              border: Border.all(color: Colors.grey.shade300),
              borderRadius: BorderRadius.circular(7), // Slightly reduced radius
              color: Colors.white,
            ),
            child: DropdownButtonHideUnderline(
              child: DropdownButton<String>(
                isExpanded: true,
                value: value,
                icon: Icon(Icons.keyboard_arrow_down, color: Colors.grey.shade700, size: 18), // Reduced icon size
                style: const TextStyle(fontSize: 13, color: Colors.black87), // Reduced font size by 15%
                padding: const EdgeInsets.symmetric(horizontal: 10), // Reduced padding
                items: items.map((String item) {
                  return DropdownMenuItem<String>(
                    value: item,
                    child: Text(item),
                  );
                }).toList(),
                onChanged: onChanged,
              ),
            ),
          ),
        ],
      ),
    );
  }
}