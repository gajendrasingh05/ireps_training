import 'package:flutter/material.dart';
import 'package:intl/intl.dart'; // Import for date formatting

void main() {
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Consumption Analysis',
      theme: ThemeData(
        colorScheme: ColorScheme.fromSeed(
          seedColor: Colors.blue.shade800,
          primary: Colors.blue.shade800,
        ),
        useMaterial3: true,
        inputDecorationTheme: InputDecorationTheme(
          filled: true,
          fillColor: Colors.grey.shade50,
          border: OutlineInputBorder(
            borderRadius: BorderRadius.circular(6),
            borderSide: BorderSide(color: Colors.grey.shade300),
          ),
          enabledBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(6),
            borderSide: BorderSide(color: Colors.grey.shade300),
          ),
          focusedBorder: OutlineInputBorder(
            borderRadius: BorderRadius.circular(6),
            borderSide: BorderSide(color: Colors.blue.shade800, width: 1.5),
          ),
          contentPadding: const EdgeInsets.symmetric(horizontal: 8, vertical: 6),
        ),
        elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
            backgroundColor: Colors.blue.shade800,
            foregroundColor: Colors.white,
            elevation: 0,
            padding: const EdgeInsets.symmetric(vertical: 10),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(6),
            ),
          ),
        ),
        outlinedButtonTheme: OutlinedButtonThemeData(
          style: OutlinedButton.styleFrom(
            foregroundColor: Colors.blue.shade800,
            side: BorderSide(color: Colors.blue.shade800),
            padding: const EdgeInsets.symmetric(vertical: 10),
            shape: RoundedRectangleBorder(
              borderRadius: BorderRadius.circular(6),
            ),
          ),
        ),
      ),
      home: const ConsumptionAnalysisPage(),
    );
  }
}

class ConsumptionAnalysisPage extends StatefulWidget {
  const ConsumptionAnalysisPage({super.key});

  @override
  State<ConsumptionAnalysisPage> createState() => _ConsumptionAnalysisPageState();
}

class _ConsumptionAnalysisPageState extends State<ConsumptionAnalysisPage> {
  final TextEditingController _currentFromDateController = TextEditingController(text: '28-02-2025');
  final TextEditingController _currentToDateController = TextEditingController(text: '29-04-2025');
  final TextEditingController _previousFromDateController = TextEditingController(text: '29-12-2024');
  final TextEditingController _previousToDateController = TextEditingController(text: '27-02-2025');

  // Date format
  final DateFormat _dateFormat = DateFormat('dd-MM-yyyy');

  String _railway = 'IREPS-TESTING';
  String _department = 'Mechanical';
  String _userDepot = '36640-SR. SECTION ENGINEER-I/PS/NEW DELHI';
  String _userSubDepot = '00-SSE/EPS/UD';
  bool _isIncrease = true;
  double percentageValue = 20.0; // Default percentage value
  int selectedChangeType = 1; // 1 for increase, 0 for decrease

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: Colors.grey.shade100,
      appBar: AppBar(
        backgroundColor: Colors.blue.shade800,
        foregroundColor: Colors.white,
        title: const Text('Consumption Analysis',
          style: TextStyle(fontWeight: FontWeight.w500),
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () {},
        ),
        actions: [
          IconButton(
            icon: const Icon(Icons.home),
            onPressed: () {},
          ),
        ],
      ),
      body: SafeArea(
        child: SingleChildScrollView(
          child: Padding(
            padding: const EdgeInsets.all(10.0),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // Organization Card
                _buildCard(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text('Railway',
                                    style: TextStyle(fontSize: 12, color: Colors.black54)
                                ),
                                const SizedBox(height: 2),
                                SizedBox(
                                  height: 40,
                                  child: _buildDropdown(
                                    value: _railway,
                                    onChanged: (value) {
                                      if (value != null) {
                                        setState(() => _railway = value);
                                      }
                                    },
                                    items: ['IREPS-TESTING'],
                                    labelText: 'Railway',
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 12),
                      Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text('Department',
                                    style: TextStyle(fontSize: 12, color: Colors.black54)
                                ),
                                const SizedBox(height: 2),
                                SizedBox(
                                  height: 40,
                                  child: _buildDropdown(
                                    value: _department,
                                    onChanged: (value) {
                                      if (value != null) {
                                        setState(() => _department = value);
                                      }
                                    },
                                    items: ['Mechanical', 'Electrical', 'Civil'],
                                    labelText: 'Department',
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),

                // Location Card
                _buildCard(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text('User Depot',
                                    style: TextStyle(fontSize: 12, color: Colors.black54)
                                ),
                                const SizedBox(height: 2),
                                SizedBox(
                                  height: 40,
                                  child: _buildDropdown(
                                    value: _userDepot,
                                    onChanged: (value) {
                                      if (value != null) {
                                        setState(() => _userDepot = value);
                                      }
                                    },
                                    items: ['36640-SR. SECTION ENGINEER-I/PS/NEW DELHI'],
                                    labelText: 'User Depot',
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                      const SizedBox(height: 12),
                      Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text('User Sub Depot',
                                    style: TextStyle(fontSize: 12, color: Colors.black54)
                                ),
                                const SizedBox(height: 2),
                                SizedBox(
                                  height: 40,
                                  child: _buildDropdown(
                                    value: _userSubDepot,
                                    onChanged: (value) {
                                      if (value != null) {
                                        setState(() => _userSubDepot = value);
                                      }
                                    },
                                    items: ['00-SSE/EPS/UD'],
                                    labelText: 'User Sub Depot',
                                  ),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),

                // Time Period Card
                _buildCard(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // Current Period Section
                      const Text(
                        'Current Period',
                        style: TextStyle(
                          fontSize: 13,
                          fontWeight: FontWeight.w500,
                          color: Colors.black87,
                        ),
                      ),
                      const SizedBox(height: 6),
                      Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text('From', style: TextStyle(fontSize: 12, color: Colors.black54)),
                                const SizedBox(height: 2),
                                SizedBox(
                                  height: 38,
                                  child: _buildDateField(_currentFromDateController),
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(width: 10),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text('To', style: TextStyle(fontSize: 12, color: Colors.black54)),
                                const SizedBox(height: 2),
                                SizedBox(
                                  height: 38,
                                  child: _buildDateField(_currentToDateController),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),

                      const SizedBox(height: 14),

                      // Previous Period Section
                      const Text(
                        'Previous Period',
                        style: TextStyle(
                          fontSize: 13,
                          fontWeight: FontWeight.w500,
                          color: Colors.black87,
                        ),
                      ),
                      const SizedBox(height: 6),
                      Row(
                        children: [
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text('From', style: TextStyle(fontSize: 12, color: Colors.black54)),
                                const SizedBox(height: 2),
                                SizedBox(
                                  height: 38,
                                  child: _buildDateField(_previousFromDateController),
                                ),
                              ],
                            ),
                          ),
                          const SizedBox(width: 10),
                          Expanded(
                            child: Column(
                              crossAxisAlignment: CrossAxisAlignment.start,
                              children: [
                                const Text('To', style: TextStyle(fontSize: 12, color: Colors.black54)),
                                const SizedBox(height: 2),
                                SizedBox(
                                  height: 38,
                                  child: _buildDateField(_previousToDateController),
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),

                // Percentage Change Card
                _buildCard(
                  child: Column(
                    children: [
                      // Improved sliding toggle
                      GestureDetector(
                        onTap: () {
                          setState(() {
                            _isIncrease = !_isIncrease;
                            selectedChangeType = _isIncrease ? 1 : 0; // Update selectedChangeType
                          });
                        },
                        child: Container(
                          width: 200,
                          height: 50,
                          padding: const EdgeInsets.all(3),
                          decoration: BoxDecoration(
                            borderRadius: BorderRadius.circular(10),
                            color: Colors.grey.shade200,
                          ),
                          child: Stack(
                            children: [
                              // Sliding selector
                              AnimatedPositioned(
                                duration: const Duration(milliseconds: 200),
                                curve: Curves.easeInOut,
                                left: _isIncrease ? 0 : 100,
                                top: 0,
                                child: Container(
                                  width: 95,
                                  height: 45,
                                  decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(10),
                                    color: Colors.blue.shade800,
                                  ),
                                ),
                              ),
                              // Labels
                              Row(
                                mainAxisAlignment: MainAxisAlignment.spaceEvenly,
                                children: [
                                  Expanded(
                                    child: Center(
                                      child: Text(
                                        'Increase (+)',
                                        style: TextStyle(
                                          color: _isIncrease ? Colors.white : Colors.black87,
                                          fontWeight: _isIncrease ? FontWeight.bold : FontWeight.normal,
                                          fontSize: 14,
                                        ),
                                      ),
                                    ),
                                  ),
                                  Expanded(
                                    child: Center(
                                      child: Text(
                                        'Decrease (-)',
                                        style: TextStyle(
                                          color: !_isIncrease ? Colors.white : Colors.black87,
                                          fontWeight: !_isIncrease ? FontWeight.bold : FontWeight.normal,
                                          fontSize: 14,
                                        ),
                                      ),
                                    ),
                                  ),
                                ],
                              ),
                            ],
                          ),
                        ),
                      ),
                      const SizedBox(height: 10),

                      // Slider implementation for percentage selection
                      Row(
                        children: [
                          const Text(
                            'By',
                            style: TextStyle(
                              fontSize: 14,
                              fontWeight: FontWeight.w500,
                            ),
                          ),
                          const SizedBox(width: 12),
                          Expanded(
                            child: Column(
                              children: [
                                SliderTheme(
                                  data: SliderThemeData(
                                    activeTrackColor: Colors.blue.shade800,
                                    inactiveTrackColor: Colors.blue.shade100,
                                    thumbColor: Colors.blue.shade800,
                                    overlayColor: Colors.blue.shade800.withOpacity(0.2),
                                    trackHeight: 4,
                                    thumbShape: const RoundSliderThumbShape(enabledThumbRadius: 10),
                                  ),
                                  child: Slider(
                                    value: percentageValue,
                                    min: 0,
                                    max: 100,
                                    divisions: 100,
                                    onChanged: (newValue) {
                                      setState(() {
                                        percentageValue = newValue;
                                      });
                                    },
                                  ),
                                ),
                                Row(
                                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                                  children: [
                                    Text('0%', style: TextStyle(color: Colors.grey.shade600, fontSize: 12)),
                                    Container(
                                      padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                                      decoration: BoxDecoration(
                                        color: Colors.blue.shade800,
                                        borderRadius: BorderRadius.circular(12),
                                      ),
                                      child: Text(
                                        '${percentageValue.toInt()}%',
                                        style: const TextStyle(
                                          color: Colors.white,
                                          fontWeight: FontWeight.bold,
                                          fontSize: 14,
                                        ),
                                      ),
                                    ),
                                    Text('100%', style: TextStyle(color: Colors.grey.shade600, fontSize: 12)),
                                  ],
                                ),
                              ],
                            ),
                          ),
                        ],
                      ),

                      const SizedBox(height: 16),

                      // Item buttons
                      Row(
                        mainAxisAlignment: MainAxisAlignment.center,
                        children: [
                          _buildItemButton(
                            title: 'Item Type',
                            icon: Icons.category,
                            color: Colors.blue.shade600,
                          ),
                          const SizedBox(width: 16),
                          _buildItemButton(
                            title: 'Item Usage',
                            icon: Icons.assessment,
                            color: Colors.indigo.shade500,
                          ),
                        ],
                      ),
                    ],
                  ),
                ),

                const SizedBox(height: 14),

                // Action buttons
                Row(
                  children: [
                    Expanded(
                      child: SizedBox(
                        height: 44,
                        child: ElevatedButton(
                          onPressed: () {
                            // Handle Get Details functionality
                            _showDetailsDialog(context);
                          },
                          child: const Text('Get Details', style: TextStyle(fontSize: 15)),
                        ),
                      ),
                    ),
                    const SizedBox(width: 10),
                    Expanded(
                      child: SizedBox(
                        height: 44,
                        child: OutlinedButton(
                          onPressed: () {
                            // Reset form values
                            setState(() {
                              _currentFromDateController.text = '28-02-2025';
                              _currentToDateController.text = '29-04-2025';
                              _previousFromDateController.text = '29-12-2024';
                              _previousToDateController.text = '27-02-2025';
                              _railway = 'IREPS-TESTING';
                              _department = 'Mechanical';
                              _userDepot = '36640-SR. SECTION ENGINEER-I/PS/NEW DELHI';
                              _userSubDepot = '00-SSE/EPS/UD';
                              _isIncrease = true;
                              percentageValue = 20.0;
                              selectedChangeType = 1;
                            });
                          },
                          child: const Text('Reset', style: TextStyle(fontSize: 15)),
                        ),
                      ),
                    ),
                  ],
                ),

                const SizedBox(height: 10),
              ],
            ),
          ),
        ),
      ),
    );
  }

  // Show details dialog when "Get Details" is pressed
  void _showDetailsDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Consumption Analysis', style: TextStyle(color: Colors.blue.shade800)),
        content: Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text('Selected Parameters:', style: TextStyle(fontWeight: FontWeight.bold)),
            const SizedBox(height: 8),
            Text('• Railway: $_railway'),
            Text('• Department: $_department'),
            Text('• User Depot: $_userDepot'),
            Text('• Current Period: ${_currentFromDateController.text} to ${_currentToDateController.text}'),
            Text('• Previous Period: ${_previousFromDateController.text} to ${_previousToDateController.text}'),
            Text('• Change Type: ${_isIncrease ? "Increase" : "Decrease"} by ${percentageValue.toInt()}%'),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('Close', style: TextStyle(color: Colors.blue.shade800)),
          ),
          ElevatedButton(
            onPressed: () {
              // Process details and close dialog
              Navigator.of(context).pop();
              // Show snackbar to indicate success
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: const Text('Analysis completed successfully!'),
                  backgroundColor: Colors.green.shade700,
                  behavior: SnackBarBehavior.floating,
                ),
              );
            },
            style: ElevatedButton.styleFrom(
              backgroundColor: Colors.blue.shade800,
            ),
            child: const Text('Process'),
          ),
        ],
      ),
    );
  }

  Widget _buildItemButton({
    required String title,
    required IconData icon,
    required Color color,
  }) {
    return Container(
      width: 140,
      height: 40,
      decoration: BoxDecoration(
        gradient: LinearGradient(
          colors: [color, color.withOpacity(0.8)],
          begin: Alignment.topLeft,
          end: Alignment.bottomRight,
        ),
        borderRadius: BorderRadius.circular(8),
        boxShadow: [
          BoxShadow(
            color: color.withOpacity(0.3),
            blurRadius: 4,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Material(
        color: Colors.transparent,
        child: InkWell(
          onTap: () {
            // Show item selection dialog
            _showItemSelectionDialog(context, title);
          },
          borderRadius: BorderRadius.circular(8),
          child: Row(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              Icon(icon, color: Colors.white, size: 18),
              const SizedBox(width: 6),
              Text(
                title,
                style: const TextStyle(
                  color: Colors.white,
                  fontWeight: FontWeight.w500,
                  fontSize: 14,
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }

  // Show item selection dialog when item buttons are pressed
  void _showItemSelectionDialog(BuildContext context, String type) {
    List<String> items = [];

    if (type == 'Item Type') {
      items = ['Raw Materials', 'Components', 'Tools', 'Consumables', 'Spare Parts'];
    } else if (type == 'Item Usage') {
      items = ['Production', 'Maintenance', 'Office', 'Safety', 'Research'];
    }

    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: Text('Select $type', style: TextStyle(color: Colors.blue.shade800)),
        content: Container(
          width: double.maxFinite,
          child: ListView.builder(
            shrinkWrap: true,
            itemCount: items.length,
            itemBuilder: (context, index) {
              return ListTile(
                title: Text(items[index]),
                onTap: () {
                  Navigator.of(context).pop();
                  // Show selection confirmation
                  ScaffoldMessenger.of(context).showSnackBar(
                    SnackBar(
                      content: Text('$type: ${items[index]} selected'),
                      behavior: SnackBarBehavior.floating,
                    ),
                  );
                },
              );
            },
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: Text('Cancel', style: TextStyle(color: Colors.blue.shade800)),
          ),
        ],
      ),
    );
  }

  Widget _buildCard({String? title, required Widget child}) {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.only(bottom: 10),
      padding: const EdgeInsets.all(10),
      decoration: BoxDecoration(
        color: Colors.white,
        borderRadius: BorderRadius.circular(8),
        boxShadow: [
          BoxShadow(
            color: Colors.black.withOpacity(0.05),
            blurRadius: 6,
            offset: const Offset(0, 2),
          ),
        ],
      ),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          if (title != null) ...[
            Text(
              title,
              style: TextStyle(
                fontSize: 14,
                fontWeight: FontWeight.w600,
                color: Colors.blue.shade800,
              ),
            ),
            const SizedBox(height: 10),
          ],
          child,
        ],
      ),
    );
  }

  Widget _buildDropdown({
    required String value,
    required void Function(String?) onChanged,
    required List<String> items,
    required String labelText,
  }) {
    return Stack(
      children: [
        Container(
          decoration: BoxDecoration(
            borderRadius: BorderRadius.circular(6),
            border: Border.all(color: Colors.grey.shade300),
            color: Colors.grey.shade50,
          ),
          child: DropdownButtonHideUnderline(
            child: DropdownButton<String>(
              value: value,
              onChanged: onChanged,
              items: items.map((String item) {
                return DropdownMenuItem<String>(
                  value: item,
                  child: Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 10.0, vertical: 8.0),
                    child: Text(
                      item,
                      style: const TextStyle(fontSize: 13),
                    ),
                  ),
                );
              }).toList(),
              isExpanded: true,
              icon: Icon(Icons.arrow_drop_down, color: Colors.blue.shade800, size: 22),
              iconSize: 22,
              padding: const EdgeInsets.symmetric(horizontal: 8),
            ),
          ),
        ),
      ],
    );
  }

  Widget _buildDateField(TextEditingController controller) {
    return Container(
      height: 36,
      decoration: BoxDecoration(
        borderRadius: BorderRadius.circular(6),
        border: Border.all(color: Colors.grey.shade300),
        color: Colors.grey.shade50,
      ),
      child: Row(
        children: [
          // Text part
          Expanded(
            child: Padding(
              padding: const EdgeInsets.only(left: 8.0),
              child: Text(
                controller.text,
                style: const TextStyle(fontSize: 13),
              ),
            ),
          ),
          // Calendar Icon Button with clear separation
          Container(
            width: 28,
            height: 36,
            decoration: BoxDecoration(
              color: Colors.grey.shade100,
              borderRadius: const BorderRadius.only(
                topRight: Radius.circular(5),
                bottomRight: Radius.circular(5),
              ),
              border: Border(
                left: BorderSide(color: Colors.grey.shade300),
              ),
            ),
            child: Material(
              color: Colors.transparent,
              child: InkWell(
                borderRadius: const BorderRadius.only(
                  topRight: Radius.circular(5),
                  bottomRight: Radius.circular(5),
                ),
                onTap: () async {
                  // Show date picker when icon is tapped
                  final DateTime? pickedDate = await showDatePicker(
                    context: context,
                    initialDate: _parseDate(controller.text) ?? DateTime.now(),
                    firstDate: DateTime(2020),
                    lastDate: DateTime(2030),
                    builder: (context, child) {
                      return Theme(
                        data: Theme.of(context).copyWith(
                          colorScheme: ColorScheme.light(
                            primary: Colors.blue.shade800,
                          ),
                        ),
                        child: child!,
                      );
                    },
                  );

                  // Update controller with selected date
                  if (pickedDate != null) {
                    setState(() {
                      controller.text = _dateFormat.format(pickedDate);
                    });
                  }
                },
                child: Icon(
                  Icons.calendar_today_outlined,
                  size: 16,
                  color: Colors.blue.shade800,
                ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  // Helper method to parse date string
  DateTime? _parseDate(String dateStr) {
    try {
      return _dateFormat.parse(dateStr);
    } catch (e) {
      return null;
    }
  }
}